# Paradigmas de Programaccion 24/25 -- PARGAMMON --
# Practica 2 (GUI)
# Practica realizada por:
# Mario San José de Prado
# Rodrigo Gil Hernaiz

#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.5 on Thu May  1 12:37:45 2025
#
import wx
import wx.adv
from pargammon import JugPtos,Columna,Pargammon
from random import seed

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade
AZAR = 75

class Ventana(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: Ventana.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((1250, 800))  #(585, 501)
        self.SetTitle("Pargammon")
        
        #------------PANEL PRINCIPAL DE LA VENTANA-------------#
        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)

        #-----------SIMPLEBOOK--------#
        self.notebook = wx.Simplebook(self.panel_1, wx.ID_ANY)
        sizer_1.Add(self.notebook, 1, wx.ALL | wx.EXPAND, 0)

        self.notebook_Page1 = wx.Panel(self.notebook, wx.ID_ANY)
        self.notebook.AddPage(self.notebook_Page1,"Page 1")

        #------- SIZER PRINCIPAL DE LA PAG1 DEL SIMPLEBOOK----#
        sizer_izqd_pag1 = wx.BoxSizer(wx.VERTICAL)

        #---- SIZER DE LAS OPCIONES DEL JUEGO -----#
        sizer_opc_jueg = wx.StaticBoxSizer(wx.StaticBox(self.notebook_Page1, wx.ID_ANY, "Opciones del juego"), wx.VERTICAL)
        sizer_izqd_pag1.Add(sizer_opc_jueg, 2, wx.EXPAND, 0)

        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_opc_jueg.Add(sizer_5, 1, wx.ALL | wx.EXPAND, 0)

        # --- SELECCION DE NUMERO DE JUGADORES ---#
        label_1 = wx.StaticText(self.notebook_Page1, wx.ID_ANY, u"Nº Jugadores", style=wx.ALIGN_CENTER_HORIZONTAL)
        sizer_5.Add(label_1, 0, wx.ALL | wx.EXPAND, 3)

        self.spin_ctrl_jugadores = wx.SpinCtrl(self.notebook_Page1, wx.ID_ANY, "2", min=2, max=4)
        sizer_5.Add(self.spin_ctrl_jugadores, 0, 0, 0)

        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_opc_jueg.Add(sizer_6, 1, wx.EXPAND, 0)

        # --- SELECCION DE NUMERO DE COLUMNAS ---#
        label_2 = wx.StaticText(self.notebook_Page1, wx.ID_ANY, u" Nº Columnas", style=wx.ALIGN_CENTER_HORIZONTAL)
        sizer_6.Add(label_2, 0, wx.ALL | wx.EXPAND, 1)

        self.spin_ctrl_columnas = wx.SpinCtrl(self.notebook_Page1, wx.ID_ANY, "10", min=2, max=100)
        sizer_6.Add(self.spin_ctrl_columnas, 0, wx.ALL, 0)

        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_opc_jueg.Add(sizer_7, 1, wx.EXPAND, 0)

        # --- SELECCION DE NUMERO DE FICHAS ---#
        label_3 = wx.StaticText(self.notebook_Page1, wx.ID_ANY, u"   Nº Fichas", style=wx.ALIGN_CENTER_HORIZONTAL)
        sizer_7.Add(label_3, 0, wx.ALL | wx.EXPAND, 6)

        self.spin_ctrl_fichas = wx.SpinCtrl(self.notebook_Page1, wx.ID_ANY, "5", min=1, max=100)
        sizer_7.Add(self.spin_ctrl_fichas, 0, wx.ALL | wx.EXPAND, 4)

        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_opc_jueg.Add(sizer_8, 1, wx.EXPAND, 0)

        # --- SELECCION DE NUMERO DE DADOS ---#
        label_4 = wx.StaticText(self.notebook_Page1, wx.ID_ANY, u"      Nº Dados", style=wx.ALIGN_CENTER_HORIZONTAL)
        sizer_8.Add(label_4, 0, wx.ALL | wx.EXPAND, 2)

        self.spin_ctrl_dados = wx.SpinCtrl(self.notebook_Page1, wx.ID_ANY, "3", min=2, max=4)
        sizer_8.Add(self.spin_ctrl_dados, 0, wx.ALL, 5)

        # --- SIZER DE LAS OPCIONES DE LOS JUGADORES
        sizer_opc_juga = wx.StaticBoxSizer(wx.StaticBox(self.notebook_Page1, wx.ID_ANY, "Opciones de los jugadores"), wx.VERTICAL)
        sizer_izqd_pag1.Add(sizer_opc_juga, 3, wx.ALL | wx.EXPAND, 0)

        # --- LIST_BOX CON LOS JUGADORES ---#
        self.list_box = wx.ListBox(self.notebook_Page1, wx.ID_ANY, choices=["Jugador 1: Humano","Jugador 2: Humano"])
        self.list_box.SetSelection(0)
        sizer_opc_juga.Add(self.list_box, 1, wx.ALL | wx.EXPAND, 0)

        sizer_nombre = wx.BoxSizer(wx.HORIZONTAL)
        sizer_izqd_pag1.Add(sizer_nombre, 1, wx.EXPAND, 0)

        # --- SELECCION DEL NOMBRE DEL JUGADOR ---#
        label_5 = wx.StaticText(self.notebook_Page1, wx.ID_ANY, "Nombre", style=wx.ALIGN_CENTER_HORIZONTAL | wx.ST_ELLIPSIZE_START)
        sizer_nombre.Add(label_5, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 0)

        self.text_ctrl_nombre = wx.TextCtrl(self.notebook_Page1, wx.ID_ANY, "")
        sizer_nombre.Add(self.text_ctrl_nombre, 1, wx.ALL | wx.EXPAND, 0)

        sizer_imagen = wx.BoxSizer(wx.HORIZONTAL)
        sizer_izqd_pag1.Add(sizer_imagen, 3, wx.ALL | wx.EXPAND, 3)

        # --- SELECCION DE LA IMAGEN DE LAS FICHAS DEL JUGADOR ---#
        label_6 = wx.StaticText(self.notebook_Page1, wx.ID_ANY, "Imagen", style=wx.ALIGN_CENTER_HORIZONTAL)
        sizer_imagen.Add(label_6, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 0)
        self.imagenes = [  
         "fichas/ficha1.png",
         "fichas/ficha2.png",
         "fichas/ficha3.png",
         "fichas/ficha4.png",
        ]
        
        self.bitmap_combo_box = wx.adv.BitmapComboBox(self.notebook_Page1, wx.ID_ANY,style=wx.CB_READONLY)
        for i in self.imagenes:
            bmp = wx.Bitmap(i,wx.BITMAP_TYPE_ANY)
            self.bitmap_combo_box.Append("",bmp)
        
        self.bitmap_combo_box.SetSelection(0)    
        sizer_imagen.Add(self.bitmap_combo_box, 1, wx.ALL | wx.EXPAND, 0)

        sizer_tipo = wx.BoxSizer(wx.HORIZONTAL)
        sizer_izqd_pag1.Add(sizer_tipo, 1, wx.EXPAND, 0)

        # --- SELECCION DEL TIPO DE JUGADOR ---#
        label_7 = wx.StaticText(self.notebook_Page1, wx.ID_ANY, "Tipo", style=wx.ALIGN_CENTER_HORIZONTAL)
        sizer_tipo.Add(label_7, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 0)

        self.radio_box_tipos = wx.RadioBox(self.notebook_Page1, wx.ID_ANY, "", choices=["Humano", "Maquina Tonta", "Maquina Lista"], majorDimension=1, style=wx.RA_SPECIFY_COLS)
        self.radio_box_tipos.SetSelection(0)
        sizer_tipo.Add(self.radio_box_tipos, 2, wx.ALL | wx.EXPAND, 0)

        # --- BOTON PARA JUGAR E INICIAR LA PARTIDA (CAMBIO DE PAGINA) ---#
        self.boton_jugar = wx.Button(self.notebook_Page1, wx.ID_ANY, "JUGAR !")
        self.boton_jugar.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        self.boton_jugar.SetBitmap(wx.Bitmap("misc/playing_cards.png", wx.BITMAP_TYPE_ANY))
        sizer_izqd_pag1.Add(self.boton_jugar, 1, wx.ALL | wx.EXPAND, 1)

        self.notebook_Page2 = wx.Panel(self.notebook, wx.ID_ANY)
        self.notebook.AddPage(self.notebook_Page2,"Page 2")

        # --- SIZER PRINCIPAL DE LA PAG 2 DEL SIMPLEBOOK ---#
        sizer_izqd_pag2 = wx.BoxSizer(wx.VERTICAL)

        # --- SIZER DEL HISTORIAL DE JUGADAS ---#
        sizer_historial = wx.StaticBoxSizer(wx.StaticBox(self.notebook_Page2, wx.ID_ANY, "Historial de Jugadas"), wx.VERTICAL)
        sizer_izqd_pag2.Add(sizer_historial, 2, wx.EXPAND, 0)

        # --- LIST_BOX DEL HISTORIAL DE JUGADAS ---#
        self.list_box_historial = wx.ListBox(self.notebook_Page2, wx.ID_ANY,)
        sizer_historial.Add(self.list_box_historial, 1, wx.ALL | wx.EXPAND, 0)

        # --- SIZER DEL TURNO Y LA PUNTUACION DE LOS JUGADORES ---#
        sizer_turnoyPunt = wx.StaticBoxSizer(wx.StaticBox(self.notebook_Page2, wx.ID_ANY, "Turno y Puntuacion"), wx.VERTICAL)
        sizer_izqd_pag2.Add(sizer_turnoyPunt, 3, wx.EXPAND, 0)
        
        font = wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD)
        
        # --- LIST_CTRL PARA EL TURNO Y LA PUNTUACION DE LOS JUGADORES ---#
        self.list_ctrl_1 = wx.ListCtrl(self.notebook_Page2, wx.ID_ANY, style=wx.LC_HRULES | wx.LC_REPORT | wx.LC_VRULES)

        # Cambiar la fuente de las celdas del ListCtrl
        self.list_ctrl_1.SetFont(font)
        
        self.list_ctrl_1.AppendColumn("Jugador", format=wx.LIST_FORMAT_CENTER, width=-1)
        self.list_ctrl_1.AppendColumn("Sacadas", format=wx.LIST_FORMAT_CENTER, width=-1)
        self.list_ctrl_1.AppendColumn("Puntos", format=wx.LIST_FORMAT_CENTER, width=-1)
        
        self.list_image = wx.ImageList(64,64)
        self.list_ctrl_1.AssignImageList(self.list_image,wx.IMAGE_LIST_SMALL)
        
        sizer_turnoyPunt.Add(self.list_ctrl_1, 2, wx.ALL | wx.EXPAND, 0)

        # --- SIZER PARA LOS DADOS DE LA PARTIDA ---#
        self.sizer_dados = wx.StaticBoxSizer(wx.StaticBox(self.notebook_Page2, wx.ID_ANY, "Dados"), wx.HORIZONTAL)
        sizer_izqd_pag2.Add(self.sizer_dados,0, wx.EXPAND | wx.ALL, 0)

        sizer_15 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_izqd_pag2.Add(sizer_15, 1, wx.ALL | wx.EXPAND, 1)

        # --- BOTON PARA SALTAR EL DADO ACTUAL ---#
        self.boton_saltar = wx.Button(self.notebook_Page2, wx.ID_ANY, "Saltar Dado")
        self.boton_saltar.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        self.boton_saltar.SetBitmap(wx.Bitmap("dados/dado_skip.png", wx.BITMAP_TYPE_ANY))
        sizer_15.Add(self.boton_saltar, 0, wx.ALL | wx.EXPAND, 0)

        # --- BOTON PARA FINALIZAR LA PARTIDA ---#
        self.boton_fin = wx.Button(self.notebook_Page2, wx.ID_ANY, "Finalizar Partida")
        self.boton_fin.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        self.boton_fin.SetBitmap(wx.Bitmap("misc/stop.png", wx.BITMAP_TYPE_ANY))
        sizer_15.Add(self.boton_fin, 0, wx.ALL | wx.EXPAND, 0)

        # --- PANEL PRINCIPAL DEL TABLERO DE JUEGO ---#
        self.panel_2 = wx.ScrolledWindow(self.panel_1, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
        self.panel_2.SetScrollRate(10, 10)
        sizer_1.Add(self.panel_2, 4, wx.EXPAND, 0)
        
        #--- SIZER PARA LAS COLUMNAS (PanelColumna)
        self.sizer_columnas = wx.BoxSizer(wx.HORIZONTAL)
        
        self.notebook_Page2.SetSizer(sizer_izqd_pag2)

        self.notebook_Page1.SetSizer(sizer_izqd_pag1)

        self.panel_1.SetSizer(sizer_1)
        
        self.panel_2.SetSizer(self.sizer_columnas)

        self.Layout()
        # end wxGlade
        
        #Imagenes por defecto para 2 jugadores (ficha1,ficha2)
        self.imagenes_jugadores = list(range(2))
        
        ################## SONIDOS ##################
        self.sonido_dados = wx.adv.Sound("sonidos/dados.wav")
        self.sonido_fichas = wx.adv.Sound("sonidos/fichas.wav")
        self.sonido_error = wx.adv.Sound("sonidos/error.wav")
        self.sonido_ganador = wx.adv.Sound("sonidos/win.wav")          
        ########### MANEJADORES DE EVENTOS ####################
        
        self.text_ctrl_nombre.Bind(wx.EVT_KILL_FOCUS,self.cambiar_nombre)
        self.spin_ctrl_jugadores.Bind(wx.EVT_SPINCTRL,self.cambiar_numero_jugadores)
        self.radio_box_tipos.Bind(wx.EVT_RADIOBOX,self.actualizar_tipo)
        
        self.list_box.Bind(wx.EVT_LISTBOX, self.actualizar_imagen_y_tipo)
        self.bitmap_combo_box.Bind(wx.EVT_COMBOBOX, self.actualizar_imagen_jugador)
        self.boton_jugar.Bind(wx.EVT_BUTTON,self.cambiar_pagina)
        
        self.list_box_historial.Bind(wx.EVT_LEFT_DCLICK,self.deshacer_jugadas)
        self.boton_saltar.Bind(wx.EVT_BUTTON,self.saltar_dado)
        self.boton_fin.Bind(wx.EVT_BUTTON,self.fin_partida_boton)
        
        ########################################################
                
    #metodo que cambia el numero de jugadores que aparece en la listbox cuando se actualiza el valor de spinctrl    
    def cambiar_numero_jugadores(self,event):
        """Metodo que recibe un evento de wx.EVT_SPINCTRL y actualiza 
            un listbox con el numero de jugadores"""
            
        numero_cambiar = self.spin_ctrl_jugadores.GetValue()
        numero_actual = self.list_box.GetCount()
        
        if numero_cambiar > numero_actual:
            for i in range(numero_actual+1,numero_cambiar+1):
                self.list_box.Append(f"Jugador {i}: Humano")
                img_idx = (i-1) % len(self.imagenes)
                self.imagenes_jugadores.append(img_idx)
        elif numero_cambiar < numero_actual:
            for i in range(numero_actual-numero_cambiar):
                self.list_box.Delete(self.list_box.GetCount()-1)
                self.imagenes_jugadores.pop()
    
    
    #metodo que actualiza la imagen seleccionada en el combo_box y el tipo de jugador 
    def actualizar_imagen_y_tipo(self, event):
        """Metodo que recibe un evento de wx.EVT_LISTBOX y actualiza la 
            imagen del bitmapCombobox y el tipo de jugador en el listbox de jugadores"""
            
        seleccion = self.list_box.GetSelection()
        if seleccion != wx.NOT_FOUND:
            # Mostrar imagen guardada
            self.bitmap_combo_box.SetSelection(self.imagenes_jugadores[seleccion])
            
            # Mostrar tipo actual
            nombre = self.list_box.GetString(seleccion)
            tipo = nombre.split(":")[1].strip() if ":" in nombre else "Humano"
            if tipo in ["Humano", "Maquina Tonta", "Maquina Lista"]:
                self.radio_box_tipos.SetSelection(["Humano", "Maquina Tonta", "Maquina Lista"].index(tipo))
    
    
    #metodo que actualiza la imagen del jugador en el combo_box            
    def actualizar_imagen_jugador(self, event):
        """Metodo que recibe un evento de wx.EVT_COMBOBOX y actualiza la imagen del 
            bitmapCombobox"""
            
        seleccion = self.list_box.GetSelection()
        if seleccion != wx.NOT_FOUND:
            self.imagenes_jugadores[seleccion] = self.bitmap_combo_box.GetSelection()

                
    #metodo que cambia el nombre del jugador de la listbox por el dado en el text_ctrl y el tipo de jugador            
    def cambiar_nombre(self,event):
        """Metodo que recibe un evento de wx.EVT_KILL_FOCUS y cambia
            el nombre del jugador seleccionado en el listbox"""
            
        nuevo = self.text_ctrl_nombre.GetValue()
        seleccion = self.list_box.GetSelection()
        
        if seleccion != wx.NOT_FOUND and nuevo:
            self.list_box.SetString(seleccion,nuevo)
            actual = self.list_box.GetString(seleccion)
            tipo = actual.split(":")[1] if ':' in actual else "Humano"
            self.list_box.SetString(seleccion,f"{nuevo}: {tipo.strip()}")
        
        self.text_ctrl_nombre.Clear()
        event.Skip()
    
        
    #metodo que actualiza el tipo list_box con la seleccion del tipo de jugador
    def actualizar_tipo(self,event):
        """Metodo que recibe un evento de wx.EVT_RADIOBOX y actualiza
            el tipo de jugador en el listbox de jugadores"""
            
        seleccion = self.list_box.GetSelection()
        
        if seleccion != wx.NOT_FOUND:
            indice = self.radio_box_tipos.GetSelection()
            jugador = self.radio_box_tipos.GetString(indice)
            
            nombre =  self.list_box.GetString(seleccion)
            
            if ':' not in nombre:
                nuevo_nombre = f"{nombre}: {jugador}"
            else:
                lista = nombre.split(":")
                nuevo_nombre = f"{lista[0]}: {jugador}"
                
            self.list_box.SetString(seleccion,nuevo_nombre)
    
    
    #metodo que cambia la pagina del simplebook para comenzar la partida                
    def cambiar_pagina(self,event):
        """Metodo que recibe un evento de wx.EVT_BUTTON y comprueba que los 
            parametros sean correctos para inciar la partida y cambiar la pagina del simplebook"""
            
        num_jugadores = self.num_jugadores()
        num_columnas = self.num_columnas()
        num_fichas = self.num_fichas()
        num_dados = self.num_dados()
        
        jugadores = "\u263a\u263bX0"
        
        if num_columnas < num_jugadores:
            wx.MessageBox("El número de columnas no puede ser menor que el número de jugadores.", "Error", wx.ICON_ERROR)
            print("El número de columnas no puede ser menor que el número de jugadores.")
            return
        
        if len(self.imagenes_jugadores) != len(set(self.imagenes_jugadores)):
            wx.MessageBox("Los jugadores deben tener imagenes de fichas diferentes", "Error", wx.ICON_ERROR)
            print("Los jugadores deben tener imagenes de fichas diferentes")
            return
        
        seed(AZAR) #aqui cada vez que finaliza una partida siempre ejecuta la misma secuencia de dados
         
        fichas = jugadores[:num_jugadores]
        self.juego = Pargammon(num_columnas,num_fichas,num_dados,fichas=fichas)
        print(self.juego)
        self.dados_turno = list(self.juego.dados)
        self.juego.haz_jugada([])  # ??
        self.iniciar_partida()
        self.notebook.SetSelection(1)
    
    
    #metodo que establece la configuracion inicial de la partida 
    def iniciar_partida(self):
        """Metodo que incia la partida, estableciendo los jugadores, los dados,
            el turno y las columnas en la interfaz"""
            
        self.añadir_jugadores()
        self.puntuacion_sacadas()
        self.resaltar_turno()
        self.sonido_dados.Play()
        self.crearDados()
        self.crearColumnas()
        
        self.pausa = False
        self.jugada_auto()
        
        self.panel_2.Parent.Fit()
        self.Layout()
    
    
    #metodo que crea las imagenes de los dados en el sizer 
    def crearDados(self):
        """Metodo que muestra el numero de dados correspondiente con sus imagenes y el dado actual 
            usado en el turno actual"""
            
        self.sizer_dados.Clear(True)
        dados_actuales = self.juego.dados
        
        dados_usados = len(self.dados_turno)- len(dados_actuales)
        for i, valor in enumerate(self.dados_turno):
            # Si es el primero (dado en uso), usa la imagen resaltada
            if i == dados_usados:
                bmp_dado = f"./dados/dado{valor}act.png"
            else:
                bmp_dado = f"./dados/dado{valor}.png"
                
            dado = wx.StaticBitmap(self.notebook_Page2, wx.ID_ANY, wx.Bitmap(f"{bmp_dado}", wx.BITMAP_TYPE_ANY))
            self.sizer_dados.Add(dado,0,0,0)
        
        self.Layout()
        self.notebook_Page2.Layout()
        self.notebook_Page2.Refresh()
    
    
    #metodo que crea las columnas del tablero (PanelColuma)
    def crearColumnas(self):
        """Metodo que crea las columnas del tablero en la interfaz, utilizando objetos PanelColumna"""
        
        self.sizer_columnas.Clear()
        self.columnas = []
        self.jugada = []
        for columna in self.juego.tab:
            #print(columna)
            panel_columna = PanelColumna(self.panel_2,columna,self.imagenes_jugadores,self.on_columna) #size=(80,200)
            self.sizer_columnas.Add(panel_columna, 0, wx.EXPAND | wx.ALL, 5)
            self.columnas.append(panel_columna)
                
        self.panel_2.Layout()
        self.panel_2.Refresh()
    
     
    #metodo que resalta el turno del jugador actual en el list_ctrl de la puntuacion y fichas sacadas       
    def resaltar_turno(self):
        """Metodo que permite resaltar el turno actual en un list_ctrl en cada jugada"""
        
        num_elementos = self.list_ctrl_1.GetItemCount()
        turno = self.juego.turno
        
        for i in range(num_elementos):
            if i == turno:
                self.list_ctrl_1.SetItemBackgroundColour(i, wx.Colour(255, 255, 0))  # Amarillo
            else:
                # Restauramos el color de fondo si no es el turno actual
                self.list_ctrl_1.SetItemBackgroundColour(i, wx.Colour(255, 255, 255))  # Blanco
    
        # Refresca el ListCtrl para aplicar los cambios visuales
        self.list_ctrl_1.Refresh()
    
    
    #metodo que actualiza el estado del list_ctrl con las fichas sacadas y la puntuacion despues de una jugada completa (D movimientos)    
    def puntuacion_sacadas(self):
        """Metodo que actualiza el list_ctrl con las fichas sacadas por cada
            jugador y su puntuacion en cada movimiento"""
            
        info = self.juego.info_jugadores()
        for i,tupla in enumerate(info):
            sacadas = tupla[0]
            puntuacion = tupla[1]
            self.list_ctrl_1.SetItem(i,1,f"{sacadas}")
            self.list_ctrl_1.SetItem(i,2,f"{puntuacion}")
        
        self.list_ctrl_1.Refresh()
        
        
    #metodo que añade los jugadores al list_ctrl con sus respectivas imagenes e inicializa los items a 0        
    def añadir_jugadores(self):
        """Metodo que inicializa un list_ctrl con cada jugador, su puntuacion,
            sus fichas sacadas y su imagen seleccionada"""
            
        self.list_ctrl_1.DeleteAllItems()
        self.list_image.RemoveAll()
        font2 = wx.Font(30, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD)
         
        #print(self.imagenes_jugadores) 
        for i, img_idx in enumerate(self.imagenes_jugadores):
            bmp = wx.Bitmap(f"fichas/ficha{img_idx+1}.png", wx.BITMAP_TYPE_ANY)  
            imagen_idx = self.list_image.Add(bmp)
            
            # Insertar el jugador en el ListCtrl con imagen, sacadas y puntos inicializados
            item_index = self.list_ctrl_1.InsertItem(i, "", imagen_idx)
            self.list_ctrl_1.SetItem(i, 1, f"{0}")  # Inicializar con 0 sacadas
            self.list_ctrl_1.SetItem(i, 2, f"{0}")  # Inicializar con 0 puntos
            self.list_ctrl_1.SetItemFont(i, font2)
    
    
    #metodo que trata la logica del juego tras la pulsacion de un PanelColumna         
    def on_columna(self,panel_columna):
        """Metodo que permite aplicar la logica del juego del Pargammon para un 
            jugador Humano. Este metodo aplica los movimientos en funcion de la columna
            seleccionada en la interfaz y el dado actual y finalmente actualiza el turno"""
            
        col_idx = panel_columna.col.ind
        
        dado = self.juego.dados[0]
        #print(f"columna{chr(65+col_idx)} -> {chr(65+dado+col_idx)} con dado {dado}")
        movimiento = self.juego.haz_movim(col_idx,dado)
        if movimiento == None: 
            self.sonido_fichas.Play()
            self.juego.dados = self.juego.dados[1:]
            self.crearDados()
            self.puntuacion_sacadas()
            #print(self.juego)
            self.jugada.append(chr(65+col_idx))
        else:
            print(movimiento)
            self.sonido_error.Play()
        
        if self.juego.dados == []:
            
            self.añadir_jugada(self.jugada)
            panel_columna.restaurar_colores()
            if self.juego.cambiar_turno()== False:
                self.juego.haz_jugada([])           # ??
                self.dados_turno = list(self.juego.dados)
                self.resaltar_turno()
                self.sonido_dados.Play()
                self.crearDados()
                
                print("".join(self.jugada))
                print(self.juego)
                
                self.jugada = []
                self.jugada_auto()
            else:
                print("partida finalizada")
                self.ganador()
    
    
    #metodo que trata las jugadas automaticas
    def jugada_auto(self):
        """Metodo que permite la jugabilidad en funcion del tipo de juagdor actual"""
        
        tipos = self.obtener_tipos_jugadores()
        tipo = tipos[self.juego.turno]
        
        if tipo == "Humano":
            return
        
        if tipo =="Maquina Tonta":
            jugada = self.juego.jugada_azar().str_jugada
        
        if tipo == "Maquina Lista":
            jugada = self.juego.jugada_mejor().str_jugada

        self.jugada_actual = list(jugada)
        self.indice_jugada = 0
        
        wx.CallLater(750,self.movimiento_auto)
    
            
    def movimiento_auto(self):
        """Metodo que realiza los movimientos de los jugadores automaticos con un retardo de 0.75 s """
        
        if self.pausa:
            return
        
        if self.juego.dados == []:
            # Jugada completada
            self.fin_jugada_auto()
            return
    
        letra = self.jugada_actual[self.indice_jugada]
        self.juego.haz_movim(ord(letra) - 65, self.juego.dados[0])
        self.sonido_fichas.Play()
        self.juego.dados = self.juego.dados[1:]
        
        self.crearDados()
        self.puntuacion_sacadas()
        self.Refresh()
    
        self.indice_jugada += 1
        
        wx.CallLater(750, self.movimiento_auto)
    
            
    def fin_jugada_auto(self):
        """Metodo que actualiza el turno y anota la jugada cuando un jugador automatico acaba"""
        
        print(self.juego)
        print("".join(self.jugada_actual))
        self.añadir_jugada(self.jugada_actual)
    
        if self.juego.cambiar_turno() == False:
            self.juego.haz_jugada([])
            self.dados_turno = list(self.juego.dados)
            self.resaltar_turno()
            self.sonido_dados.Play()
            self.crearDados()
            self.puntuacion_sacadas()
            # Iniciar nueva jugada automática si es necesario
            self.jugada_auto()
        else:
            print("partida finalizada")
            self.ganador()
            #print(self.list_box_historial.GetCount(),"Jugadas")
    
    
    #metodo que salta un dado tras pulsar el boton de saltar dado        
    def saltar_dado(self,event):
        """Metodo que recibe un evento de wx.EVT_BUTTON y salta el dado actual"""
        
        tipos = self.obtener_tipos_jugadores() # Tipos de jugadores
        tipo = tipos[self.juego.turno] #Tipo de jugador actual
        
        if tipo == "Humano":
            print("dado saltado")
            self.juego.haz_jugada([])
            self.juego.haz_movim(-1,self.juego.dados[0])
            self.juego.dados = self.juego.dados[1:]
            self.jugada.append("@")
        
            if self.juego.dados == []:
                self.añadir_jugada(self.jugada)
                self.jugada = []
                self.juego.cambiar_turno()
                self.juego.haz_jugada([])
                self.dados_turno = list(self.juego.dados)
                self.sonido_dados.Play()
                self.crearDados() 
                self.resaltar_turno()
                self.puntuacion_sacadas()
                print(self.juego)
            
            else:
                self.crearDados()
                #print(self.juego)
    
    
    def deshacer_jugadas(self,event):
        """Metodo que recibe un evento de wx.EVT_LEFT_DCLICK y deshace las 
            jugadas posteriores a la seleccionada sin incluirla"""
            
        tipos = self.obtener_tipos_jugadores()
        tipo = tipos[self.juego.turno]
        if tipo =="Humano":
            indice = self.list_box_historial.GetSelection()
        
            jugada_seleccionada = self.list_box_historial.GetString(indice)
            if indice != wx.NOT_FOUND:
                jugadas = self.list_box_historial.GetCount()
                jugadas_deshacer = jugadas - (indice +1)
                #print(jugadas_deshacer)
                if jugadas_deshacer >0:
                    #print("deshacer jugadas a partir de: ",jugada_seleccionada)
                    self.juego.deshacer(jugadas_deshacer)
                                
                    for i in range(jugadas_deshacer):
                        self.juego.deshaz_jugada()
                        self.list_box_historial.Delete(self.list_box_historial.GetCount()-1)
            
                    self.dados_turno = list(self.juego.dados)
                    self.crearDados()
                    self.crearDados()   
                    self.resaltar_turno()
                    self.puntuacion_sacadas()
                    
                self.Layout()
                self.Refresh()
            
                print(self.juego)
                self.jugada_auto()
    
    
    #metodo que añade una jugada al list_box del historial de jugadas        
    def añadir_jugada(self,jugada):
        """Metodo que añade una jugada al listbox del historial de jugadas"""
        
        nombres = self.obtener_nombres_jugadores()
        self.list_box_historial.Append(f"{nombres[self.juego.turno]}: {"".join(jugada)}")   
    
    
    #metodo que devuelve una lista con los nombres de los jugadores
    def obtener_nombres_jugadores(self):
        """Metodo que devuelve los nombres de los jugadores en una lista
            :return Lista con los nombres de los jugadores"""
            
        items = self.list_box.GetItems()
        nombres = []
        for item in items:
            nombre = item.split(":")[0]
            nombres.append(nombre)
        
        return nombres
    
    
    #metodo que devuelve una lista con los tipos de jugadores    
    def obtener_tipos_jugadores(self):
        """Metodo que devuelve los tipos de jugadores de la partida en una lista
            :return Lista con los tipos de jugadores"""
            
        items = self.list_box.GetItems()
        tipos = []
        for item in items:
            tipo = item.split(":")[1].strip()
            tipos.append(tipo)
        
        return tipos
    
           
    #metodo que devuelve el numero de jugadores de la partida    
    def num_jugadores(self):
        """Metodo que devuelve el numero de jugadores de la partida"""
        
        return self.spin_ctrl_jugadores.GetValue()
    
    
    #metodo que devuelve el numero de columnas
    def num_columnas(self):
        """Metodo que devuelve el numero de columnas de la partida"""
        
        return self.spin_ctrl_columnas.GetValue()
    
    
    #metodo que devuelve el numero de fichas
    def num_fichas(self):
        """Metodo que devuelve el numero de fichas de la partida"""
        
        return self.spin_ctrl_fichas.GetValue()

    
    #metodo que devuelve el numero de dados
    def num_dados(self):
        """Metodo que devuelve el numero de dados de la partida"""
        
        return self.spin_ctrl_dados.GetValue()


    def fin_partida_boton(self,event):
        """Metodo que recibe un evento de wx.EVT_BUTTON y detiene el estado 
            actual de la partida con posibilidad de continuar o finalizarla"""
            
        self.pausa = True
        #self.Close()
        self.dialogo = MyDialog(parent=self)
        self.dialogo.Center(True)
        r = self.dialogo.ShowModal()
        self.dialogo.Destroy()
        
        self.pausa = False
        self.movimiento_auto()
        
        
    def ganador(self):
        """Metodo que actualiza la interfaz y muestra una ventana final 
            con el ganador de la partida"""
            
        self.sonido_ganador.Play()
        self.Close()
        nombres = self.obtener_nombres_jugadores()
        img_ganador = self.imagenes_jugadores[self.juego.turno]
        nomb_ganador = nombres[self.juego.turno]
        self.frame3 = Ventana_Final(img_ganador, nomb_ganador, None, wx.ID_ANY, "")
        self.frame3.Center(True)
        self.frame3.Show()
        
                
# end of class Ventana

class PanelColumna(wx.Panel):
    def __init__(self, parent, col: Columna ,imagenes_jugadores, callback ,size=(100, 200)):
        super().__init__(parent, wx.ID_ANY, size=size)
        self.col = col  # La columna a la que este panel representa
        self.col.callback = self.on_cambio  # Asociamos la función de actualización
        self.SetBackgroundStyle(wx.BG_STYLE_PAINT)
        self.imagenes_jugadores = imagenes_jugadores # las imagenes de los jugadores seleccionadas en la primera pagina
        self.background_color = wx.Colour(255,255,255)
        self.callback = callback # callback para llamar a la ventana tras pulsar una columna
        
        ######## MANEJADORES DE EVENTOS ###########
        
        self.Bind(wx.EVT_PAINT, self.on_paint)  # Evento de pintado del panel
        self.Bind(wx.EVT_SIZE,self.on_size)     # Evento de redimensionado de la ventana
        self.Bind(wx.EVT_ENTER_WINDOW, self.on_mouse_enter)  # Evento cuando el ratón entra
        self.Bind(wx.EVT_LEAVE_WINDOW, self.on_mouse_leave)  # Evento cuando el ratón sale
        self.Bind(wx.EVT_LEFT_DOWN, self.on_left_click)      # Evento cuando se pulsa una columna
        
        ###########################################

    
    def on_cambio(self, obj):
        """ Cuando se realiza un cambio en la columna, refrescar la vista """
        
        self.Refresh()  # Redibuja el panel

    
    # metodo que refresca el panel cuando se redimensiona la pantalla
    def on_size(self,event):
        """Metodo que refresca el panel cuando se redimensiona la pantalla"""
        
        self.Refresh()
        event.Skip()
    
         
    def on_paint(self, event):
        """ Metodo que recibe un evento de wx.EVT_PAINT e inicializa la interfaz para dibujar """
        
        dc = wx.AutoBufferedPaintDC(self)
        dc.SetBackground(wx.Brush(self.background_color))
        dc.Clear()  # Limpiar el fondo
        self.dibujar_columna(dc)  # Llamamos a la función para dibujar

    
    #metodo que dibuja las fichas de las columna
    def dibujar_columna(self, dc):
        """ Metodo que dibuja las fichas en la columna """
        
        ancho, alto = self.GetSize()
        espacio = 5  # Espacio entre fichas

        for i in range(self.col.num):
            img_idx = self.imagenes_jugadores[self.col.jug]
            imagen = wx.Image(f"fichas/ficha{img_idx + 1}.png", wx.BITMAP_TYPE_ANY)
            bmp = wx.Bitmap(imagen)  # Crear el bitmap de la imagen
            ficha_width, ficha_height = bmp.GetWidth(), bmp.GetHeight()
            x = (ancho - ficha_width) // 2
            y = alto - (i + 1) * (ficha_height + espacio)
            dc.DrawBitmap(bmp, x, y)
            #print(f"Dibujando ficha en ({x}, {y}) con tamaño ({ficha_width}, {ficha_height})")  # Verificar coordenadas y tamaño
    
     
    #metodo que cambia el fondo cuando entra el raton y cambia el color de su casilla de destino   
    def on_mouse_enter(self, event):
        """ Metodo que recibe un evento de wx.EVT_ENTER_WINDOW y cambia el fondo a verde
            cuando el ratón entra en la columnay en azul la casilla de destino """
        
        #self.Parent -> ScrolledWindow
        #self.Parent.Parent -> Panel
        #self.Parent.Parent.Parent -> Ventana
        
        tipos = self.Parent.Parent.Parent.obtener_tipos_jugadores() # Tipos de jugadores
        tipo = tipos[self.Parent.Parent.Parent.juego.turno] #Tipo de jugador actual
        
        if self.col.jug == self.Parent.Parent.Parent.juego.turno:
            if tipo == "Humano":
                self.background_color = wx.Colour(0, 255, 0)  # Fondo verde
                self.Refresh()
        
            col_destino = self.col.ind + self.Parent.Parent.Parent.juego.dados[0]
            if col_destino < len(self.Parent.Parent.Parent.columnas):
                if tipo == "Humano":
                    self.Parent.Parent.Parent.columnas[col_destino].background_color = wx.Colour(0,0,255) #Fondo azul
                    self.Parent.Parent.Parent.columnas[col_destino].Refresh()

    
    #metodo que cambia el fondo cuando sale el raton y cambia el color de su casilla de destino
    def on_mouse_leave(self, event):
        """ Metodo que recibe un evento de wx.EVT_LEAVE_WINDOW y restaura el fondo a blanco cuando
            el ratón sale tanto en la columna de origen como la de destino"""
        
        if self.col.jug == self.Parent.Parent.Parent.juego.turno:
            self.background_color = wx.Colour(255, 255, 255)  # Fondo blanco
            self.Refresh() # Redibuja el panel
        
            col_destino = self.col.ind + self.Parent.Parent.Parent.juego.dados[0]
            if col_destino < len(self.Parent.Parent.Parent.columnas):
                self.Parent.Parent.Parent.columnas[col_destino].background_color = wx.Colour(255,255,255) #Blanco
                self.Parent.Parent.Parent.columnas[col_destino].Refresh()
    
        
    #metodo que manda el callback a la ventana tras la pulsacion de la columna    
    def on_left_click(self, event):
        """ Metodo que recibe un evento de wx.EVT_LEFT_DOWN y 
            detecta el clic izquierdo del ratón sobre la columna """
            
        pos = event.GetPosition()  # Obtiene la posición del clic
        #print(f"Se ha hecho clic en la columna: {self.col.ind}")
        tipos = self.Parent.Parent.Parent.obtener_tipos_jugadores() # Tipos de jugadores
        tipo = tipos[self.Parent.Parent.Parent.juego.turno] #Tipo de jugador actual
        
        if self.is_position_in_column(pos):
            if tipo == "Humano": #Restringir el click sobre la columna cuando el jugador sea Humano
                self.callback(self)
            #print("Se ha hecho clic sobre la columna.")

    
    def is_position_in_column(self, pos):
        """ Metodo que verifica si la posición del clic está dentro de la columna """
        
        ancho, alto = self.GetSize()
        return 0 <= pos.x <= ancho and 0 <= pos.y <= alto
    
    
    def restaurar_colores(self):
        """Metodo que restaura establece el fondo blanco en todas las 
            columnas del tablero"""
            
        for columna in self.Parent.Parent.Parent.columnas:
            columna.background_color = wx.Colour(255,255,255)
            columna.Refresh()
    

class Ventana_Inicio(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((1250, 800))
        self.SetTitle("Pargammon")

        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_2 = wx.BoxSizer(wx.VERTICAL)

        bitmap_1 = wx.StaticBitmap(self.panel_1, wx.ID_ANY, wx.Bitmap("misc/Pargammon_inic.png", wx.BITMAP_TYPE_ANY))
        bitmap_1.SetMinSize((1000, 650))
        sizer_2.Add(bitmap_1, 2, wx.ALL | wx.EXPAND, 0)

        self.boton_jugar = wx.Button(self.panel_1, wx.ID_ANY, "PULSA PARA JUGAR\n", style=wx.BU_TOP)
        self.boton_jugar.SetFont(wx.Font(25, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        self.boton_jugar.SetBitmap(wx.Bitmap("misc/vaca.png", wx.BITMAP_TYPE_ANY), dir=wx.BOTTOM)
        sizer_2.Add(self.boton_jugar, 0, wx.ALL | wx.EXPAND, 0)

        self.panel_1.SetSizer(sizer_2)

        self.Layout()
        # end wxGlade
        
        ######### MANEJADORES DE EVENTOS #############
        
        self.boton_jugar.Bind(wx.EVT_BUTTON,self.juego)
        
        ##############################################
        
    def juego(self,event):
        """Metodo que recibe un evento de wx.EVT_BUTTON y abre una ventana para 
            comenzar el juego"""
            
        self.Close()
        self.frame = Ventana(None, wx.ID_ANY, "")
        #self.SetTopWindow(self.frame)
        self.frame.Center(True)
        self.frame.Show()
        


class Ventana_Final(wx.Frame):
    def __init__(self,imagen_ganador, nombre_ganador, *args, **kwds,):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((1250, 800))
        self.SetTitle("Pargammon")

        self.imagen_ganador = imagen_ganador
        self.nombre_ganador = nombre_ganador

        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_principal = wx.BoxSizer(wx.VERTICAL)

        sizer_superior = wx.BoxSizer(wx.HORIZONTAL)
        sizer_principal.Add(sizer_superior, 1, wx.EXPAND, 0)

        label_fin = wx.StaticText(self.panel_1, wx.ID_ANY, f"FIN DE LA PARTIDA\n\nGANADOR: {nombre_ganador}", style=wx.ALIGN_CENTER_HORIZONTAL)
        label_fin.SetFont(wx.Font(18, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_superior.Add(label_fin, 1, wx.ALL | wx.EXPAND, 0)
        
        self.bmp_button = wx.Button(self.panel_1, wx.ID_ANY, "", style=wx.BORDER_NONE)
        self.bmp_button.SetBitmap(wx.Bitmap(f"fichas/ficha{self.imagen_ganador+1}.png", wx.BITMAP_TYPE_ANY))
        
        sizer_superior.Add(self.bmp_button, 1, wx.ALL | wx.EXPAND, 0)

        bitmap_fondo = wx.StaticBitmap(self.panel_1, wx.ID_ANY, wx.Bitmap("misc/fondo_fin.png", wx.BITMAP_TYPE_ANY))
        bitmap_fondo.SetMinSize((1000, 500))
        sizer_principal.Add(bitmap_fondo, 8, wx.ALL | wx.EXPAND, 0)

        sizer_inferior = wx.BoxSizer(wx.HORIZONTAL)
        sizer_principal.Add(sizer_inferior, 1, wx.ALL | wx.EXPAND, 2)

        self.button_nueva = wx.Button(self.panel_1, wx.ID_ANY, "Nueva\nPartida")
        self.button_nueva.SetMinSize((797, 100))
        self.button_nueva.SetFont(wx.Font(20, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_inferior.Add(self.button_nueva, 1, wx.ALL | wx.EXPAND, 0)

        self.button_salir = wx.Button(self.panel_1, wx.ID_ANY, "Volver al\nMenu Principal")
        self.button_salir.SetMinSize((798, 100))
        self.button_salir.SetFont(wx.Font(20, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_inferior.Add(self.button_salir, 0, wx.ALL | wx.EXPAND, 0)

        self.panel_1.SetSizer(sizer_principal)

        self.Layout()
        # end wxGlade
        
        ############ SONIDOS #################
        
        self.sonido = wx.adv.Sound("sonidos/barra.wav")
        
        ######################################
        
        ################## MANEJADORES DE EVENTOS ######################
        
        self.Bind(wx.EVT_BUTTON,self.boton_salir,self.button_salir)
        self.Bind(wx.EVT_BUTTON,self.boton_nueva_partida,self.button_nueva)
        self.Bind(wx.EVT_BUTTON, self.sorpresa, self.bmp_button)
        
        ################################################################ 
       
    def boton_salir(self,event):
        """Metodo que recibe un evento de wx.EVT_BUTTON y acaba la partida 
            volviendo al menu principal"""
            
        self.Close()
        self.inicio = Ventana_Inicio(None, wx.ID_ANY, "")
        self.inicio.Center(True)
        self.inicio.Show()
        
    def boton_nueva_partida(self,event):
        """Metodo que recibe un evento de wx.EVT_BUTTON y abre una nueva ventana
            para comenzar una nueva partida"""
            
        self.Close()
        self.frame = Ventana(None, wx.ID_ANY, "")
        #self.SetTopWindow(self.frame)
        self.frame.Center(True)
        self.frame.Show()
    
    def sorpresa(self,event):
        """Metodo que recibe un evento de wx.EVT_BUTTON y... ??"""
        
        self.sonido.Play()
        
        
class MyDialog(wx.Dialog):
    def __init__(self,parent, *args, **kwds):
        # begin wxGlade: MyDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self,parent, *args, **kwds)
        self.SetTitle("Pargammon")

        self.parent = parent
        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        img = wx.StaticBitmap(self, wx.ID_ANY, wx.Bitmap("misc/seguro.jpeg", wx.BITMAP_TYPE_ANY))
        sizer_1.Add(img, 2, wx.ALL | wx.EXPAND, 0)

        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)

        self.button_continuar = wx.Button(self, wx.ID_ANY, "Continuar\nPartida")
        self.button_continuar.SetFont(wx.Font(15, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_2.Add(self.button_continuar, 1, wx.ALL | wx.EXPAND, 1)

        self.button_salir = wx.Button(self, wx.ID_ANY, u"Volver\nal menú")
        self.button_salir.SetFont(wx.Font(15, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_2.Add(self.button_salir, 1, wx.ALL | wx.EXPAND, 1)

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.Layout()
        # end wxGlade
        
        ################ MANEJADORES DE EVENTOS ####################
        
        self.Bind(wx.EVT_BUTTON,self.continuar,self.button_continuar)
        self.Bind(wx.EVT_BUTTON,self.salir,self.button_salir)
        
        ############################################################
        
    def continuar(self,event):
        """Metodo que recibe un evento de wx.EVT_BUTTON y cierra el dialogo
            para seguir con la partida actual"""
            
        self.EndModal(wx.ID_OK)
        
    def salir(self,event):
        """Metodo que recibe un evento de wx.EVT_BUTTON y cierra el dialogo y 
            la ventana de juego para volver al inicio"""
            
        tipos = self.parent.obtener_tipos_jugadores() 
        tipo = tipos[self.parent.juego.turno]
        if tipo != "Humano":   
            self.parent.fin_jugada_auto()
        
        self.parent.Close()
        self.EndModal(wx.ID_CANCEL)
        
        self.frame2 = Ventana_Inicio(None, wx.ID_ANY, "")
        #self.SetTopWindow(self.frame)
        self.frame2.Center(True)
        self.frame2.Show()
        

# end of class MyDialog                   
                       
class MyApp(wx.App):
    def OnInit(self):
        self.frame2 = Ventana_Inicio(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame2)
        self.frame2.Center(True)
        self.frame2.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    #seed(AZAR) # Aqui al finalizar una partida e inciar otra la secuencia de dados es diferente
    app = MyApp(0)
    app.MainLoop()
